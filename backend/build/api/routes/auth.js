const {
  validateLoginData
} = require('../utils/validators');
const {
  checkAuth,
  checkUserExistByEmail,
  doLogin,
  doSignUp,
  doFetchProfile
} = require('../services/auth');
const doAuth = async (request, response) => {
  const user = {
    email: request.body.email,
    password: request.body.password
  };
  const {
    valid,
    errors
  } = validateLoginData(user);
  if (!valid) {
    return response.status(400).json(errors);
  }
  const existing = await checkUserExistByEmail(user.email);
  let authResult = await (existing && existing.doesExist ? doLogin(user.email, user.password) : doSignUp(user.email, user.password));
  console.log(authResult.isError);
  if (!authResult.isError) {
    return response.status(200).json({
      isError: authResult.isError,
      token: authResult.token
    });
  }
  // console.log(authResult);

  switch (authResult.error) {
    case 'auth/invalid-credential':
    case 'auth/id-token-expired':
    case 'auth/id-token-revoked':
    case 'auth/invalid-email':
    case 'auth/invalid-email-verified':
    case 'auth/invalid-id-token':
    case 'auth/invalid-password':
    case 'auth/invalid-password-hash':
    case 'auth/invalid-password-salt':
    case 'auth/invalid-uid':
    case 'auth/user-not-found':
      return response.status(403).json({
        isError: authResult.isError,
        error: 'wrong credentials, please try again'
      });
    case 'auth/internal-error':
    default:
      return response.status(500).json({
        isError: authResult.isError,
        error: 'Something went wrong!'
      });
  }
};
const doAuthCheck = async (request, response, next) => {
  const headerToken = request.headers.authorization;
  if (!headerToken) {
    return response.json({
      isError: true,
      message: "No token provided"
    }).status(401);
  }
  if (headerToken && headerToken.split(" ")[0] !== "Bearer") {
    response.json({
      isError: true,
      message: "Invalid token"
    }).status(401);
  }
  const token = headerToken.split(' ')[1];
  const authCheckingResult = await checkAuth(token);
  if (authCheckingResult.isError) {
    return response.status(403).json({
      isError: authCheckingResult.isError,
      error: authCheckingResult.error
    });
  }
  request['user'] = {
    email: authCheckingResult.user.email,
    uid: authCheckingResult.user.uid
  };
  return next();
};
const fetchProfile = (request, response) => {
  doFetchProfile(request.user.uid).then(userRecord => {
    if (userRecord) {
      return response.status(200).json({
        isError: false,
        user: userRecord?.user
      });
    }
    return response.status(204).json({});
  }).catch(error => {
    console.error(error);
    return response.status(500).json({
      isError: true,
      error: error
    });
  });
};
module.exports = {
  doAuth,
  doAuthCheck,
  fetchProfile
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2YWxpZGF0ZUxvZ2luRGF0YSIsInJlcXVpcmUiLCJjaGVja0F1dGgiLCJjaGVja1VzZXJFeGlzdEJ5RW1haWwiLCJkb0xvZ2luIiwiZG9TaWduVXAiLCJkb0ZldGNoUHJvZmlsZSIsImRvQXV0aCIsInJlcXVlc3QiLCJyZXNwb25zZSIsInVzZXIiLCJlbWFpbCIsImJvZHkiLCJwYXNzd29yZCIsInZhbGlkIiwiZXJyb3JzIiwic3RhdHVzIiwianNvbiIsImV4aXN0aW5nIiwiYXV0aFJlc3VsdCIsImRvZXNFeGlzdCIsImNvbnNvbGUiLCJsb2ciLCJpc0Vycm9yIiwidG9rZW4iLCJlcnJvciIsImRvQXV0aENoZWNrIiwibmV4dCIsImhlYWRlclRva2VuIiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJtZXNzYWdlIiwic3BsaXQiLCJhdXRoQ2hlY2tpbmdSZXN1bHQiLCJ1aWQiLCJmZXRjaFByb2ZpbGUiLCJ0aGVuIiwidXNlclJlY29yZCIsImNhdGNoIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYXV0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IHZhbGlkYXRlTG9naW5EYXRhIH0gPSByZXF1aXJlKCcuLi91dGlscy92YWxpZGF0b3JzJyk7XG5jb25zdCB7IGNoZWNrQXV0aCwgY2hlY2tVc2VyRXhpc3RCeUVtYWlsLCBkb0xvZ2luLCBkb1NpZ25VcCwgZG9GZXRjaFByb2ZpbGUgfSA9IHJlcXVpcmUoJy4uL3NlcnZpY2VzL2F1dGgnKTtcblxuY29uc3QgZG9BdXRoID0gYXN5bmMgKHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB7XG4gICAgY29uc3QgdXNlciA9IHtcbiAgICAgICAgZW1haWw6IHJlcXVlc3QuYm9keS5lbWFpbCxcbiAgICAgICAgcGFzc3dvcmQ6IHJlcXVlc3QuYm9keS5wYXNzd29yZFxuICAgIH07XG5cbiAgICBjb25zdCB7dmFsaWQsIGVycm9yc30gPSB2YWxpZGF0ZUxvZ2luRGF0YSh1c2VyKTtcbiAgICBpZiAoIXZhbGlkKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNDAwKS5qc29uKGVycm9ycyk7XG4gICAgfVxuXG4gICAgY29uc3QgZXhpc3RpbmcgPSBhd2FpdCBjaGVja1VzZXJFeGlzdEJ5RW1haWwodXNlci5lbWFpbCk7XG4gICAgbGV0IGF1dGhSZXN1bHQgPSBhd2FpdCAoZXhpc3RpbmcgJiYgZXhpc3RpbmcuZG9lc0V4aXN0ID8gZG9Mb2dpbih1c2VyLmVtYWlsLCB1c2VyLnBhc3N3b3JkKSA6IGRvU2lnblVwKHVzZXIuZW1haWwsIHVzZXIucGFzc3dvcmQpKTtcbiAgICBjb25zb2xlLmxvZyhhdXRoUmVzdWx0LmlzRXJyb3IpO1xuICAgIGlmICghYXV0aFJlc3VsdC5pc0Vycm9yKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAwKS5qc29uKHsgaXNFcnJvcjogYXV0aFJlc3VsdC5pc0Vycm9yLCB0b2tlbjogYXV0aFJlc3VsdC50b2tlbiB9KTtcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coYXV0aFJlc3VsdCk7XG5cbiAgICBzd2l0Y2goYXV0aFJlc3VsdC5lcnJvcikge1xuICAgICAgICBjYXNlICdhdXRoL2ludmFsaWQtY3JlZGVudGlhbCc6XG4gICAgICAgIGNhc2UgJ2F1dGgvaWQtdG9rZW4tZXhwaXJlZCc6XG4gICAgICAgIGNhc2UgJ2F1dGgvaWQtdG9rZW4tcmV2b2tlZCc6XG4gICAgICAgIGNhc2UgJ2F1dGgvaW52YWxpZC1lbWFpbCc6XG4gICAgICAgIGNhc2UgJ2F1dGgvaW52YWxpZC1lbWFpbC12ZXJpZmllZCc6XG4gICAgICAgIGNhc2UgJ2F1dGgvaW52YWxpZC1pZC10b2tlbic6XG4gICAgICAgIGNhc2UgJ2F1dGgvaW52YWxpZC1wYXNzd29yZCc6XG4gICAgICAgIGNhc2UgJ2F1dGgvaW52YWxpZC1wYXNzd29yZC1oYXNoJzpcbiAgICAgICAgY2FzZSAnYXV0aC9pbnZhbGlkLXBhc3N3b3JkLXNhbHQnOlxuICAgICAgICBjYXNlICdhdXRoL2ludmFsaWQtdWlkJzpcbiAgICAgICAgY2FzZSAnYXV0aC91c2VyLW5vdC1mb3VuZCc6XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDQwMykuanNvbih7IGlzRXJyb3I6IGF1dGhSZXN1bHQuaXNFcnJvciwgZXJyb3I6ICd3cm9uZyBjcmVkZW50aWFscywgcGxlYXNlIHRyeSBhZ2Fpbid9KTtcbiAgICAgICAgY2FzZSAnYXV0aC9pbnRlcm5hbC1lcnJvcic6XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMCkuanNvbih7IGlzRXJyb3I6IGF1dGhSZXN1bHQuaXNFcnJvciwgZXJyb3I6ICdTb21ldGhpbmcgd2VudCB3cm9uZyEnIH0pO1xuICAgIH1cbn07XG5jb25zdCBkb0F1dGhDaGVjayA9IGFzeW5jIChyZXF1ZXN0LCByZXNwb25zZSwgbmV4dCkgPT4ge1xuICAgIGNvbnN0IGhlYWRlclRva2VuID0gcmVxdWVzdC5oZWFkZXJzLmF1dGhvcml6YXRpb247XG4gICAgaWYgKCFoZWFkZXJUb2tlbikge1xuICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbih7IGlzRXJyb3I6IHRydWUsIG1lc3NhZ2U6IFwiTm8gdG9rZW4gcHJvdmlkZWRcIiB9KS5zdGF0dXMoNDAxKTtcbiAgICB9XG4gICAgaWYgKGhlYWRlclRva2VuICYmIGhlYWRlclRva2VuLnNwbGl0KFwiIFwiKVswXSAhPT0gXCJCZWFyZXJcIikge1xuICAgICAgICByZXNwb25zZS5qc29uKHsgaXNFcnJvcjogdHJ1ZSwgbWVzc2FnZTogXCJJbnZhbGlkIHRva2VuXCIgfSkuc3RhdHVzKDQwMSk7XG4gICAgfVxuICAgIGNvbnN0IHRva2VuID0gaGVhZGVyVG9rZW4uc3BsaXQoJyAnKVsxXTtcbiAgICBjb25zdCBhdXRoQ2hlY2tpbmdSZXN1bHQgPSBhd2FpdCBjaGVja0F1dGgodG9rZW4pO1xuXG4gICAgaWYgKGF1dGhDaGVja2luZ1Jlc3VsdC5pc0Vycm9yKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoNDAzKS5qc29uKHtpc0Vycm9yOiBhdXRoQ2hlY2tpbmdSZXN1bHQuaXNFcnJvciwgZXJyb3I6IGF1dGhDaGVja2luZ1Jlc3VsdC5lcnJvcn0pO1xuICAgIH1cbiAgICByZXF1ZXN0Wyd1c2VyJ10gPSB7XG4gICAgICAgIGVtYWlsOiBhdXRoQ2hlY2tpbmdSZXN1bHQudXNlci5lbWFpbCxcbiAgICAgICAgdWlkOiBhdXRoQ2hlY2tpbmdSZXN1bHQudXNlci51aWRcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5leHQoKTtcbn07XG5jb25zdCBmZXRjaFByb2ZpbGUgPSAocmVxdWVzdCwgcmVzcG9uc2UpID0+IHtcbiAgICBkb0ZldGNoUHJvZmlsZShyZXF1ZXN0LnVzZXIudWlkKVxuICAgICAgICAudGhlbigodXNlclJlY29yZCkgPT4ge1xuICAgICAgICAgICAgaWYodXNlclJlY29yZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjAwKS5qc29uKHtpc0Vycm9yOiBmYWxzZSwgdXNlcjogdXNlclJlY29yZD8udXNlciB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5zdGF0dXMoMjA0KS5qc29uKHt9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2Uuc3RhdHVzKDUwMCkuanNvbih7IGlzRXJyb3I6IHRydWUsIGVycm9yOiBlcnJvciB9KTtcbiAgICAgICAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtkb0F1dGgsIGRvQXV0aENoZWNrLCBmZXRjaFByb2ZpbGV9O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNO0VBQUVBO0FBQWtCLENBQUMsR0FBR0MsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0FB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